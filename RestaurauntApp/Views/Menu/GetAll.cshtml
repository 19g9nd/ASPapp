@model List<MenuItem>

@{
    ViewData["Title"] = "Menu Items";
}

<title>@ViewData["Title"]</title>
 <link href="@Url.Content("~/css/Menu/GetAll/light.css")" rel="stylesheet" type="text/css" />

<body class="main-container">
    <h2>Menu Items</h2>
    <div class="category-filter">
        <button onclick="showAllItems()">Show All</button>
        <button onclick="filterItems('pizza')">Pizza</button>
        <button onclick="filterItems('pasta')">Pasta</button>
        <button onclick="filterItems('drink')">Drink</button>
        <button onclick="filterItems('salad')">Salad</button>
    </div>
    <div class="menu-grid">
        @foreach (var menuItem in Model)
        {
            <div class="menu-item  @(menuItem.Category)">
                <img class="@(menuItem.Category == "pizza" ? "rotate" : "")" src="@Url.Content(menuItem.ImageURL)"
                    alt="@menuItem.Name" />
                <div class="menu-item-details">
                    <h3>@menuItem.Name</h3>
                    <p>@menuItem.Description</p>
                    <p><strong>Category:</strong> @menuItem.Category</p>
                    <p><strong>Calories:</strong> @menuItem.Calories</p>
                    <p><strong>Price:</strong> @string.Format("{0:C}", menuItem.Price)</p>
                    @if (this.User.IsInRole("Admin"))
                    {
                        <button type="button" class="button-50 delete-button" onclick="UpdateItem(@menuItem.Id)">Change</button>
                        <form id="deleteForm-@menuItem.Id">
                            <input type="hidden" name="id" value="@menuItem.Id" />
                            <button type="button" class="button-50 delete-button"
                                onclick="submitDelete(@menuItem.Id)">Delete</button>
                        </form>
                    }
                    <a onclick="openDetails(@menuItem.Id)" class="button-50">Details</a>
                </div>
            </div>
        }

    </div>

    <div id="productDetailsModal" class="modal">
        <div class="modal-content">
            <!-- Content will be displayed here -->
        </div>
    </div>

    @if (this.User.IsInRole("Admin"))
    {
        <div class="createBtn">
            <a asp-action="Create">Add New Item</a>
        </div>
    }
</body>


<script>
    function UpdateItem(itemId) {
        fetch('/menu/edit/' + itemId, {
            method: 'GET'
        })
            .then(response => {
                if (response.ok) {
                    return response.text();
                } else {
                    throw new Error('Failed to load item for editing.');
                }
            })
            .then(data => {
                const modalContent = document.querySelector('#productDetailsModal .modal-content');
                modalContent.innerHTML = data;
                modalContent.innerHTML += '<button type="button" class="modal-close" onclick="closeModal()">&times;</button>';
                const modal = document.getElementById('productDetailsModal');
                modal.style.display = 'block';
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    function openDetails(menuItemId) {
        fetch('/menu/GetDetails?id=' + menuItemId, {
            method: 'GET'
        })
            .then(response => {
                if (response.ok) {
                    return response.text();
                } else {
                    throw new Error('Ошибка загрузки данных.');
                }
            })
            .then(data => {
                const modalContent = document.querySelector('#productDetailsModal .modal-content');
                modalContent.innerHTML = data;
                modalContent.innerHTML += '<button type="button" class="modal-close" onclick="closeModal()">&times;</button>';
                const modal = document.getElementById('productDetailsModal');
                modal.style.display = 'block';
            })
            .catch(error => {
                console.error('Ошибка загрузки данных: ' + error);
            });
    }

    function closeModal() {
        const modal = document.getElementById('productDetailsModal');
        modal.style.display = 'none';
    }

    function submitDelete(itemId) {
        if (confirm('Are you sure you want to delete this item?')) {
            var form = document.getElementById('deleteForm-' + itemId);
            var formData = new FormData(form);
            fetch('/menu/DeleteAsync', {
                method: 'DELETE',
                body: formData
            })
                .then(response => {
                    if (response.ok) {
                        window.location.reload();
                    } else if (response.status === 404) {
                        alert('Item not found.');
                    } else {
                        alert('Failed to delete item.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }
    }

    // Добавление товара в корзину
    function addToCart(itemId, itemName, itemPrice) {
        let cartItems = JSON.parse(localStorage.getItem('cartItems')) || [];
        var quantity = parseInt(document.getElementById("quantity").value); // Получаем количество из поля ввода и преобразуем его в число
        var itemIndex = cartItems.findIndex(item => item.id === itemId); // Ищем индекс товара с заданным id
        if (itemIndex !== -1) {
            // Если товар с таким id уже есть в корзине, увеличиваем его количество
            cartItems[itemIndex].quantity += quantity;
        } else {
            // Иначе добавляем новый товар в корзину
            var item = { id: itemId, name: itemName, price: itemPrice, quantity: quantity };
            cartItems.push(item);
        }
        localStorage.setItem('cartItems', JSON.stringify(cartItems));
        var message = "Added " + quantity + " item(s) to cart.";
        document.getElementById("addedMessage").innerHTML = message;
        setTimeout(function () {
            document.getElementById("addedMessage").innerHTML = "";
        }, 3000);
    }


    function filterItems(category) {
        const menuItems = document.querySelectorAll('.menu-item');
        menuItems.forEach(item => {
            if (item.classList.contains(category)) {
                item.style.display = 'flex';
            } else {
                item.style.display = 'none';
            }
        });
    }

    // Function to show all items
    function showAllItems() {
        const menuItems = document.querySelectorAll('.menu-item');
        menuItems.forEach(item => {
            item.style.display = 'flex';
        });
    }
    // Получение данных о корзине
    function getCartItems() {
        return JSON.parse(localStorage.getItem('cartItems')) || [];
    }


</script>
