@model RestaurauntApp.Models.Order

@{
    ViewData["Title"] = "Cart";
}

<link href="@Url.Content("~/css/Cart/Cart/light.css")" rel="stylesheet" type="text/css" />
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<body class="main-container">
    <h2>Cart</h2>
    <p id="emptyCartMessage" class="empty-cart-message" style="display: none;">Your cart is empty.</p>

    <table class="table">
        <thead>
            <tr>
                <th>Item Name</th>
                <th>Quantity</th>
                <th>Price</th>
                <th></th>
            </tr>
        </thead>
        <tbody id="cartItemsTableBody">
            <!-- Элементы корзины будут добавлены сюда динамически -->
        </tbody>
    </table>

    @if(Model.OrderItems.Count > 0){
    <div>
        <label for="discountCode">Enter Discount Code:</label>
        <input type="text" id="discountCode" name="discountCode">
        <button onclick="applyDiscount()">Apply</button>
    </div>

    }

    <p id="totalPrice" class="total-price">Total Price: <span id="totalPriceValue"></span></p>
    <div style="display: flex; justify-content: center;">
        <form asp-action="Checkout" method="Get">
            <button type="submit" class="btn_checkout">Checkout</button>
        </form>

    </div>
</body>

<script src="sweetalert2.all.min.js"></script>
<script type="text/javascript">
    async function displayCartItems() {
        let cartItems = JSON.parse(localStorage.getItem('cartItems')) || [];
        let totalPrice = 0;
        await createOrderFromCart();

        let tableBody = document.getElementById("cartItemsTableBody");
        tableBody.innerHTML = "";

        let emptyCartMessage = document.getElementById("emptyCartMessage");
        let checkoutButton = document.querySelector(".btn_checkout");
        let table = document.querySelector(".table");
        let totalPriceElement = document.getElementById("totalPrice");

        if (cartItems.length === 0) {
            emptyCartMessage.style.display = "block";
            checkoutButton.style.display = "none";
            table.style.display = "none";
            totalPriceElement.innerText = "";
            return;
        } else {
            emptyCartMessage.style.display = "none";
            checkoutButton.style.display = "inline-block";
            table.style.display = "table";
        }

        cartItems.forEach(item => {
            let row = document.createElement("tr");
            row.classList.add("cart-item-row");

            row.innerHTML = `
            <td>${item.name}</td>
            <td>${item.quantity}</td>
            <td>${item.price}</td>
            <td>
                <div class="button-wrapper">
                    <span class="plusBtn" onclick="plusItem('${item.id}')">+</span>
                    <span class="minusBtn" onclick="minusItem('${item.id}')">-</span>
                    <span class="remove_cmpl_btn" onclick="removeItem('${item.id}')"></span>
                </div>
            </td>
        `;
            tableBody.appendChild(row);
        });

        displayTotalPrice();
    }


    // Вызываем функцию отображения корзины при загрузке страницы
    displayCartItems();

    function removeItem(itemId) {
        console.log("Item ID to remove:", itemId);
        if (confirm('Are you sure you want to delete this item?')) {
            let cartItems = JSON.parse(localStorage.getItem('cartItems')) || [];
            let index = cartItems.findIndex(item => item.id === parseInt(itemId));
            console.log("Item ID in cartItems to remove:", index);
            if (index !== -1) {
                cartItems.splice(index, 1);
                localStorage.setItem('cartItems', JSON.stringify(cartItems));

                removeFromOrder(itemId);
                window.location.reload();
            }
        }
    }

    async function removeFromOrder(itemId) {
        try {
            await fetch('/Cart/RemoveFromOrder?itemId=' + itemId, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
        } catch (error) {
            console.error('Error removing item from order:', error);
        }
    }

    function plusItem(itemId) {
        console.log("Item ID to add:", itemId);
        let cartItems = JSON.parse(localStorage.getItem('cartItems')) || [];
        let index = cartItems.findIndex(item => item.id === parseInt(itemId));
        console.log("Item ID in cartItems to add:", index);

        if (index !== -1) {
            // Найден элемент в корзине
            cartItems[index].quantity += 1; // Увеличиваем количество товара на 1
            localStorage.setItem('cartItems', JSON.stringify(cartItems));
            window.location.reload();
        } else {
            // Элемент не найден в корзине
            console.log("Item not found in cartItems");
        }
    }
    function minusItem(itemId) {
        console.log("Item ID to minus:", itemId);
        let cartItems = JSON.parse(localStorage.getItem('cartItems')) || [];
        let index = cartItems.findIndex(item => item.id === parseInt(itemId));
        if (index !== -1) {
            // Найден элемент в корзине
            if (cartItems[index].quantity > 1) {
                cartItems[index].quantity -= 1;
            } else {
                // Если количество меньше или равно 1, удаляем элемент из корзины
                removeItem(itemId);
                return;
            }
            localStorage.setItem('cartItems', JSON.stringify(cartItems));
            window.location.reload();
        } else {
            // Элемент не найден в корзине
            console.log("Item not found in cartItems");
        }
    }


    async function createOrderFromCart() {
        let cartItems = JSON.parse(localStorage.getItem('cartItems')) || [];
        let orderItems = [];

        // Convert cart items to order items
        cartItems.forEach(cartItem => {
            let orderItemDTO = {
                MenuItemId: cartItem.id,
                Quantity: cartItem.quantity,
                Name: cartItem.name,
                Price: cartItem.price
            };
            orderItems.push(orderItemDTO);
        });

        try {
            await fetch('/Cart/AddToOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(orderItems)
            });
            updateTotalPrice();
        } catch (error) {
            console.error('Error:', error);
        }
    }

    function displayTotalPrice() {
        fetch('/Cart/GetTotalPrice', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        })
            .then(response => {
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to fetch total price');
                }
            })
            .then(data => {
                document.getElementById("totalPriceValue").innerText = data.totalPrice;
            })
            .catch(error => {
                console.error('Error fetching total price:', error);
            });
    }

    async function updateTotalPrice() {
        try {
            const response = await fetch('/Cart/GetTotalPrice', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            if (response.ok) {
                const data = await response.json();
                document.getElementById("totalPriceValue").innerText = data.totalPrice;
            } else {
                throw new Error('Failed to fetch total price');
            }
        } catch (error) {
            console.error('Error fetching total price:', error);
        }
    }

    async function applyDiscount() {
        let discountCode = document.getElementById("discountCode").value;
        console.log(discountCode);

        var formData = new FormData();
        formData.append('discountCode', discountCode);
        const Swal = window.Sweetalert2;

        try {
            const response = await fetch('/Cart/ApplyDiscount', {
                method: 'POST',
                body: formData
            });

            if (response.ok) {
                await updateTotalPrice();
                Swal.fire({
                    title: "Success!",
                    text: "Discount applied successfully!",
                    icon: "success"
                });
            } else if (response.status === 400) {
                Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "Something went wrong!",
                    footer: '<a href="#">Discount code is invalid or already used.</a>'
                });
            } else {
                alert('Failed to apply.');
            }
        } catch (error) {
            console.error('Error:', error);
        }
    }


</script>